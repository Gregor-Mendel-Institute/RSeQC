#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-

import os
import argparse
import logging

from rseqc.modules import read_dist
from rseqc.modules import bam_stats

def arg_parser(parser = None):
    '''
    Parse is an instance of the argparse which can be optionaly extended
    '''

    # create the top-level parser
    
    if parser is None:
        parser = argparse.ArgumentParser(add_help=True)
    
    subparsers = parser.add_subparsers(help='sub-command help',
                                       dest = 'command'
                                       )
    # bam_stats options
    parser_bam_stats = subparsers.add_parser('bam_stats',
                                             help = 'Summarizing mapping statistics of a BAM or SAM file'
                                             )
    parser_bam_stats.add_argument('-i', '--input_file',
                                  required = True,
                                  help = 'specify your alignment file in SAM or BAM format'
                                  )
    parser_bam_stats.add_argument('-q', '--mapq',
                                  default = 30,
                                  help = 'Minimum mapping quality to determine uniquely mapped read'
                                  )
    # read_distribution options
    parser_read_dist = subparsers.add_parser('read_dist',
                                             help = 'Get read distribution amongst gene feature, e.g exon, intron etc.'
                                             )
    parser_read_dist.add_argument('-i', '--input_file',
                                  required = True,
                                  help = 'specify your alignment file in SAM or BAM format'
                                  )
    parser_read_dist.add_argument('-g', '--gene_models',
                                  required = True,
                                  help = 'specify your gene_models file in BED12 or GTF format'
                                  )
    parser_read_dist.add_argument('-t', '--file_type',
                                  default = 'gtf',
                                  help = 'specify file type, supported fomats GTF or BED12, where each line is a transcript'
                                  )
    
    args = parser.parse_args()
    
    return args
    

def main(args):

    logging.basicConfig(level = logging.INFO)
    logger = logging.getLogger(__name__)
    logger.info(' started read distribution calculation')

    if args.command == 'read_dist':
        input_file = args.input_file
        gene_models = args.gene_models
        file_type = args.file_type

        get_distrib = read_dist.main(input_file, gene_models, file_type)

        logger.info(' finished read distribution calculation')

    if args.command == 'bam_stats':
        input_file = args.input_file
        mapq = args.mapq
        stats = bam_stats.main(input_file, mapq)

if __name__ == "__main__":
    args = arg_parser()
    main(args)
